import React from 'react';
import { CSSTransition } from 'react-transition-group';
import 'animate.css/animate.min.css';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var Animation = function Animation(_ref) {
  var _ref$animationIn = _ref.animationIn,
      animationIn = _ref$animationIn === void 0 ? '' : _ref$animationIn,
      _ref$animationOut = _ref.animationOut,
      animationOut = _ref$animationOut === void 0 ? '' : _ref$animationOut,
      _ref$animationInDelay = _ref.animationInDelay,
      animationInDelay = _ref$animationInDelay === void 0 ? 0 : _ref$animationInDelay,
      _ref$animationOutDela = _ref.animationOutDelay,
      animationOutDelay = _ref$animationOutDela === void 0 ? 0 : _ref$animationOutDela,
      _ref$animationInDurat = _ref.animationInDuration,
      animationInDuration = _ref$animationInDurat === void 0 ? 1000 : _ref$animationInDurat,
      _ref$animationOutDura = _ref.animationOutDuration,
      animationOutDuration = _ref$animationOutDura === void 0 ? 1000 : _ref$animationOutDura,
      _ref$isVisible = _ref.isVisible,
      isVisible = _ref$isVisible === void 0 ? false : _ref$isVisible,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? null : _ref$style,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      children = _ref.children,
      _ref$ref = _ref.ref,
      ref = _ref$ref === void 0 ? undefined : _ref$ref;
  style = _extends({}, style, {
    animationDelay: (isVisible ? animationInDelay : animationOutDelay) + "ms",
    animationDuration: (isVisible ? animationInDuration : animationInDuration) + "ms"
  });
  var nodeRef = React.useRef(null);
  return React.createElement(CSSTransition, {
    "in": isVisible,
    className: className,
    appear: true,
    enter: Boolean(animationIn),
    exit: Boolean(animationOut),
    style: style,
    mountOnEnter: true,
    unmountOnExit: true,
    ref: ref,
    nodeRef: nodeRef,
    timeout: {
      enter: animationInDelay + animationInDuration,
      exit: animationOutDelay + animationOutDuration
    },
    classNames: {
      appear: isVisible ? "animate__animated" : 'react_animate_css_hide',
      appearActive: isVisible ? "animate__animated animate__" + animationIn : 'react_animate_css_hide',
      appearDone: isVisible ? "animate__animated animate__" + animationIn : 'react_animate_css_hide',
      enter: "animate__animated",
      enterActive: "animate__animated animate__" + animationIn,
      enterDone: "animate__animated animate__" + animationIn,
      exit: "animate__animated",
      exitActive: "animate__animated animate__" + animationOut,
      exitDone: "animate__animated animate__" + animationOut
    }
  }, React.createElement("div", {
    ref: nodeRef
  }, children));
};

var AnimationGroup = function AnimationGroup() {
  return React.createElement("div", null);
};

export { Animation, AnimationGroup };
//# sourceMappingURL=index.modern.js.map
